@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<div class="jumbotron">
        <h1>ASP.NET</h1>
        <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
        <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
    </div>

    <div class="row">
        <div class="col-md-4">
            <h2>Getting started</h2>
            <p>
                ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that
                enables a clean separation of concerns and gives you full control over markup
                for enjoyable, agile development.
            </p>
            <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>
        </div>
        <div class="col-md-4">
            <h2>Get more libraries</h2>
            <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
            <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301866">Learn more &raquo;</a></p>
        </div>
        <div class="col-md-4">
            <h2>Web Hosting</h2>
            <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
            <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>
        </div>
    </div>*@
@*<div class="container">
        <header class="clearfix">
            <span>Blueprint</span>
            <h1>Slide and Push Menus</h1>
            <nav>
                <a href="http://tympanus.net/Blueprints/QuotesRotator/" class="icon-arrow-left" data-info="previous Blueprint">Previous Blueprint</a>
                <a href="http://tympanus.net/codrops/?p=14725" class="icon-drop" data-info="back to the Codrops article">back to the Codrops article</a>
            </nav>
        </header>
        <div class="container-fluid">
            <div class="row">
               <div class="col-md-12"> hello nepal</div>
            </div>
        </div>
    </div>*@

<div class="row">
    <div class="col-md-12">
        <div id="hot"></div>
        <div id="SID"></div>
        <!-- Button trigger modal -->
        @*<button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
            Launch demo modal
        </button>*@

        <!-- Modal -->
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">Description</h4>
                    </div>
                    <div class="modal-body">
                        <!--editor start -->
                        <div class="btn-toolbar" data-role="editor-toolbar" data-target="#editor">
                            <div class="btn-group">
                                <a class="btn dropdown-toggle" data-toggle="dropdown" title="Font"><i class="icon-font"></i><b class="caret"></b></a>
                                <ul class="dropdown-menu"></ul>
                            </div>
                            <div class="btn-group">
                                <a class="btn dropdown-toggle" data-toggle="dropdown" title="Font Size"><i class="icon-text-height"></i>&nbsp;<b class="caret"></b></a>
                                <ul class="dropdown-menu">
                                    <li><a data-edit="fontSize 5"><font size="5">Huge</font></a></li>
                                    <li><a data-edit="fontSize 3"><font size="3">Normal</font></a></li>
                                    <li><a data-edit="fontSize 1"><font size="1">Small</font></a></li>
                                </ul>
                            </div>
                            <div class="btn-group">
                                <a class="btn" data-edit="bold" title="Bold (Ctrl/Cmd+B)"><i class="icon-bold"></i></a>
                                <a class="btn" data-edit="italic" title="Italic (Ctrl/Cmd+I)"><i class="icon-italic"></i></a>
                                <a class="btn" data-edit="strikethrough" title="Strikethrough"><i class="icon-strikethrough"></i></a>
                                <a class="btn" data-edit="underline" title="Underline (Ctrl/Cmd+U)"><i class="icon-underline"></i></a>
                            </div>
                            <div class="btn-group">
                                <a class="btn" data-edit="insertunorderedlist" title="Bullet list"><i class="icon-list-ul"></i></a>
                                <a class="btn" data-edit="insertorderedlist" title="Number list"><i class="icon-list-ol"></i></a>
                                <a class="btn" data-edit="outdent" title="Reduce indent (Shift+Tab)"><i class="icon-indent-left"></i></a>
                                <a class="btn" data-edit="indent" title="Indent (Tab)"><i class="icon-indent-right"></i></a>
                            </div>
                            <div class="btn-group">
                                <a class="btn" data-edit="justifyleft" title="Align Left (Ctrl/Cmd+L)"><i class="icon-align-left"></i></a>
                                <a class="btn" data-edit="justifycenter" title="Center (Ctrl/Cmd+E)"><i class="icon-align-center"></i></a>
                                <a class="btn" data-edit="justifyright" title="Align Right (Ctrl/Cmd+R)"><i class="icon-align-right"></i></a>
                                <a class="btn" data-edit="justifyfull" title="Justify (Ctrl/Cmd+J)"><i class="icon-align-justify"></i></a>
                            </div>
                            <div class="btn-group">
                                <a class="btn dropdown-toggle" data-toggle="dropdown" title="Hyperlink"><i class="icon-link"></i></a>
                                <div class="dropdown-menu input-append">
                                    <input class="span2" placeholder="URL" type="text" data-edit="createLink" />
                                    <button class="btn" type="button">Add</button>
                                </div>
                                <a class="btn" data-edit="unlink" title="Remove Hyperlink"><i class="icon-cut"></i></a>
                            </div>

                            <div class="btn-group">
                                <a class="btn" title="Insert picture (or just drag & drop)" id="pictureBtn"><i class="icon-picture"></i></a>
                                <input type="file" data-role="magic-overlay" data-target="#pictureBtn" data-edit="insertImage" />
                            </div>
                            <div class="btn-group">
                                <a class="btn" data-edit="undo" title="Undo (Ctrl/Cmd+Z)"><i class="icon-undo"></i></a>
                                <a class="btn" data-edit="redo" title="Redo (Ctrl/Cmd+Y)"><i class="icon-repeat"></i></a>
                            </div>
                            <input type="text" data-edit="inserttext" id="voiceBtn" x-webkit-speech="">
                        </div>
                        <div id="editor">
                           
                        </div>
                        <input type="hidden" id="sid" />
                        <input type="hidden" id="property" />
                        <!--editor end-->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="btnSaveChanges">Save changes</button>
                    </div>
                </div>
            </div>
        </div>

        
    </div>
</div>
<script>
    $(function () {
        function initToolbarBootstrapBindings() {
            var fonts = ['Serif', 'Sans', 'Arial', 'Arial Black', 'Courier',
                  'Courier New', 'Comic Sans MS', 'Helvetica', 'Impact', 'Lucida Grande', 'Lucida Sans', 'Tahoma', 'Times',
                  'Times New Roman', 'Verdana'],
                  fontTarget = $('[title=Font]').siblings('.dropdown-menu');
            $.each(fonts, function (idx, fontName) {
                fontTarget.append($('<li><a data-edit="fontName ' + fontName + '" style="font-family:\'' + fontName + '\'">' + fontName + '</a></li>'));
            });
            $('a[title]').tooltip({ container: 'body' });
            $('.dropdown-menu input').click(function () { return false; })
                .change(function () { $(this).parent('.dropdown-menu').siblings('.dropdown-toggle').dropdown('toggle'); })
            .keydown('esc', function () { this.value = ''; $(this).change(); });

            $('[data-role=magic-overlay]').each(function () {
                var overlay = $(this), target = $(overlay.data('target'));
                overlay.css('opacity', 0).css('position', 'absolute').offset(target.offset()).width(target.outerWidth()).height(target.outerHeight());
            });
            if ("onwebkitspeechchange" in document.createElement("input")) {
                var editorOffset = $('#editor').offset();
                $('#voiceBtn').css('position', 'absolute').offset({ top: editorOffset.top, left: editorOffset.left + $('#editor').innerWidth() - 35 });
            } else {
                $('#voiceBtn').hide();
            }
        };
        function showErrorAlert(reason, detail) {
            var msg = '';
            if (reason === 'unsupported-file-type') { msg = "Unsupported format " + detail; }
            else {
                console.log("error uploading file", reason, detail);
            }
            $('<div class="alert"> <button type="button" class="close" data-dismiss="alert">&times;</button>' +
             '<strong>File upload error</strong> ' + msg + ' </div>').prependTo('#alerts');
        };
        initToolbarBootstrapBindings();
        $('#editor').wysiwyg({ fileUploadError: showErrorAlert });
        window.prettyPrint && prettyPrint();
    });
</script>
<script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
    ga('create', 'UA-37452180-6', 'github.io');
    ga('send', 'pageview');
</script>
<script>
(function (d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "http://connect.facebook.net/en_GB/all.js#xfbml=1";
    fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
</script>
<script>!function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = "http://platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); } }(document, "script", "twitter-wjs");</script>

<script>
    $(document).ready(function () {

      
        //AJAX Call
        var GetData = function (url, data, dataType, type) {
            var dfd = new jQuery.Deferred();
            if (!dataType)
                dataType = "json";
            if (!type)
                type = "POST";
            $.ajax({
                type: type,
                url: url,
                data: data,
                contentType: "application/json; charset=utf-8",
                dataType: dataType,
                success: function (jsonData) {
                    dfd.resolve(jsonData);
                }
                , failure: function () {
                    dfd.reject(jsonData);
                }
            });
            // Return the Promise so caller can't change the Deferred
            return dfd.promise();
        };



        //function getData() {
        //    return [
        //      ["", "Kia", "Nissan", "Toyota", "Honda"],
        //      ["2008", 10, 11, 12, 13],
        //      ["2009", 20, 11, 14, 13],
        //      ["2010", 30, 15, 12, 13]
        //    ];
        //}
        //// Instead of creating a new Handsontable instance with the container element passed as an argument,
        //// you can simply call .handsontable method on a jQuery DOM object.
        //var $container = $("#hot");
        //$container.handsontable({
        //    data: getData(),
        //    startRows: 5,
        //    startCols: 5,
        //    minRows: 5,
        //    minCols: 5,
        //    maxRows: 10,
        //    maxCols: 10,
        //    rowHeaders: true,
        //    colHeaders: true,
        //    minSpareRows: 1,
        //    contextMenu: true
        //});

        var hot3;
        var loadGrid = false;
        var renderGrid = function () {
            $.when(GetData('@Url.Action("Products", "Home")', null, "json", "GET")).then(function (data) {
                var SID = [];
                $.each(data, function (k, d) {
                    console.log(d.SID)
                    SID.push(d.SID);
                });
                var displayNone = function (instance, td, row, col, prop, value, cellProperties) {
                    Handsontable.renderers.TextRenderer.apply(this, arguments);
                    //td.style = 'display:none';
                    td.style.display = 'none';
                    //col.style = 'display:none';

                };

                function firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {
                    Handsontable.renderers.TextRenderer.apply(this, arguments);
                    //td.style.fontWeight = 'bold';
                    //td.style.color = 'green';
                    //td.style.background = '#CEC';
                }

                function shorten(text, maxLength) {
                    if (!text)
                        return text;
                    var ret = text;
                    if (ret.length > parseInt(maxLength)) {
                        ret = ret.substr(0, maxLength - 3) + "...";
                    }
                    return ret;
                }
                function descriptionRenderer(instance, td, row, col, prop, value, cellProperties) {
                    Handsontable.renderers.TextRenderer.apply(this, arguments);

                    td.innerText = shorten(value, 20);
                }

               
                var RichTextEditor = Handsontable.editors.TextEditor.prototype.extend();

                // Create options in prepare() method
                RichTextEditor.prototype.prepare = function (row, col, prop, td, originalValue, cellProperties) {
                  
                    var text = hot3.getDataAtRowProp(row, "description");
                   
                    //var detail = getDetail(hot3.getDataAtRowProp(row, "sid"), prop);
                    //$('#editor').text(detail);
                    $('#sid').val(hot3.getDataAtRowProp(row, "SID"));
                    $('#property').val(prop);
                    //Remember to invoke parent's method
                    Handsontable.editors.BaseEditor.prototype.prepare.apply(this, arguments);
                }
                RichTextEditor.prototype.open = function (row, col, prop, td, originalValue, cellProperties) {
                    var sid = $('#sid').val();
                    var prop = $('#property').val()
                    var detail = getDetail(sid, prop);
                    
                    $('#editor').focus();
                    //Remember to invoke parent's method
                    Handsontable.editors.BaseEditor.prototype.prepare.apply(this, arguments);
                    console.log('editor open');
                }
                $('#btnSaveChanges').click(function () {
                    //RichTextEditor.prototype.saveValue('this is dil', true);
                    debugger
                    var myArray = [];
                    var cell = {
                        RowID: '',
                        SID: $('#sid').val(),
                        Column: $('#property').val(),
                        NewValue: $('#editor').text(),
                        OldValue: ''
                    }
                    myArray.push(cell);
                    updateData(myArray);

                });
                Handsontable.editors.registerEditor('RichTextEditor', RichTextEditor);
               
                Handsontable.RichTextType = {
                    editor: RichTextEditor,
                    renderer: descriptionRenderer,
                    validator: null,
                    dataType: 'RichTextType'
                };

                Handsontable.cellTypes.RichTextType = Handsontable.RichTextType;




                var greenRenderer = function (instance, td, row, col, prop, value, cellProperties) {
                    Handsontable.renderers.TextRenderer.apply(this, arguments);
                    //td.style.backgroundColor = 'green';

                };

                var container = document.getElementById("hot");
                hot3 = new Handsontable(container, {
                    data: data,
                    startRows: 0,
                    startCols: 0,
                    colHeaders: false,
                    rowHeaders: true,
                    minSpareRows: 0,
                    stretchH: 'all',
                    contextMenu: true,
                    fixedRowsTop: 0,
                    search: true,
                    columnSorting: true,
                    colHeaders: ['artwork_name', 'image_name_prefix', 'title', 'description'],
                    columns: [

                       { data: "artwork_name", type: 'text' },
                       { data: "image_name_prefix", type: 'text' },
                       { data: "title", type: 'text' },
                       { data: "description", type: 'RichTextType' }


                    ],
                    fixedColumnsLeft: 0, afterChange: function (change, source, d) {
                        if (source === 'loadData') {
                            return; //don't save this change
                        }

                        var myArray = [];
                        $this = $(this)[0];
                        loadGrid = false;
                        console.log('changes:' + $this.getDataAtRowProp(change[0][0], "SID")); // << Just doesn't work - returns null!?!?
                        //console.log('changes:' + this.getDataAtRowProp(change[1][0], "SID")); // << Just doesn't work - returns null!?!?
                        $.each(change, function (i, data) {
                            debugger
                            var _sid = $this.getDataAtRowProp(data[0], "SID");
                            if (_sid === '00000000-0000-0000-0000-000000000000')
                                loadGrid = true;

                            var cell = {
                                RowID: data[0],
                                SID: _sid,
                                Column: data[1],
                                NewValue: data[3],
                                OldValue: data[2]
                            }
                            if (cell.OldValue == null)
                                cell.OldValue = "";
                            if (cell.OldValue != cell.NewValue)
                                myArray.push(cell)

                        });
                        //console.log(change);
                        var changedData = change;
                        updateData(myArray);


                    }, beforeOnCellMouseDown: function (change, source, d, d2, d3) {


                    }
                    , onSelectionEnd: function (e1, e2, e3) {

                    }
                     , persistentStateSave: function (d) {
                     }
                     , afterCreateRow: function (d, d) {
                         addRow();
                     },
                    afterRemoveRow: function (d, d1) {


                    }
                     ,
                    beforeRemoveRow: function (d, d1, d2, d3, d4, d5) {

                        var ctrl = $(this)[0];
                        deleteRows(d, d1, ctrl);
                    }
                    //,
                    //cells: function (row, col, prop) {
                    //    var cellProperties = {};
                    //    if (row === 0) {
                    //        cellProperties.renderer = firstRowRenderer; // uses function directly
                    //    }


                    //    return cellProperties;
                    //}


                });


                var onlyExactMatch = function (queryStr, value) {
                    return queryStr.toString() === value.toString();
                };

                //var searchFiled = document.getElementById('search_field');
                //Handsontable.Dom.addEvent(searchFiled, 'keyup', function (event) {
                //    var queryResult = hot3.search.query(this.value);
                //    console.log(queryResult);
                //    hot3.render();
                //});





                // This way, you can access Handsontable api methods by passing their names as an argument, e.g.:
                //var hotInstance = $("#hot").handsontable('getInstance');


            });


        }

        renderGrid();
        var updateData = function (data) {

            $.when(GetData('@Url.Action("UpdateProduct", "Home")', JSON.stringify(data), "json", "POST")).then(function (data) {
                if (loadGrid)
                    location.reload();
            });
        }
        var addRow = function () {
            $.when(GetData('@Url.Action("AddRow", "Home")', null, "json", "POST")).then(function (data) {
                location.reload();
            });
        };
        var deleteRows = function (start, rows, ctrl) {
            var myArray = [];
            var _sid = jQuery.data(document.body, "my_sid");
            for (i = start; i < start + rows; i++) {
                var sid = ctrl.getDataAtRowProp(i, "SID");
                myArray.push(sid);

            }

            var data = {
                startIndex: start,
                totalRows: rows

            }
            $.when(GetData('@Url.Action("DeleteRows", "Home")', JSON.stringify(myArray), "json", "POST")).then(function (data) {

            });
        }
        var getDetail = function (sid, property) {
            var data = {
                sid: sid,
                property:property
            }
            $.when(GetData('@Url.Action("GetDetail", "Home")', data, "text", "GET")).then(function (data) {
                $('#editor').text(data);
                $('#myModal').modal('show');
                $('#editor').focus();
                loadGrid = true;
            });
        }



        $('td').click(function () {
            setActive(this);
        });
        $('input').focus(function () {
            setActive($(this).closest('td'));
            $(this).select();
        });
        var setActive = function (elem) {

            $(elem).addClass('td-active');
        };
        $('input').focusout(function () {
            $(this).closest('tbody').find('.td-active').removeClass('td-active');
        });



    });
</script>